Q1


 
import matplotlib.pyplot as plt

def plot_flight_paths(flight_paths):
    # Define colors for each flight path
    colors = ['r', 'g', 'b', 'c', 'm', 'y']
    
    plt.figure(figsize=(10, 8))
    
    for i, path in enumerate(flight_paths):
        x_coords, y_coords = zip(*path)  # Unzip the coordinates
        plt.plot(x_coords, y_coords, marker='o', color=colors[i % len(colors)], label=f'Flight {i + 1}')
    
    plt.title('Flight Paths')
    plt.xlabel('X Coordinate')
    plt.ylabel('Y Coordinate')
    plt.legend()
    plt.grid(True)
    plt.show()

def main():
    num_flights = int(input("Enter the number of flights: "))
    
    flight_paths = []
    
    for i in range(num_flights):
        num_coords = int(input(f"Enter the number of coordinates for Flight {i + 1}: "))
        path = []
        
        print(f"Enter coordinates for Flight {i + 1} (format: x,y):")
        for _ in range(num_coords):
            coord = input()
            x, y = map(int, coord.split(','))
            path.append((x, y))
        
        flight_paths.append(path)
    
    plot_flight_paths(flight_paths)

if __name__ == "__main__":
    main()



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Q2


def distribute_apples(apples):
    total_weight = sum(apples)
    ram_share = total_weight * 0.50
    sham_share = total_weight * 0.30
    rahim_share = total_weight * 0.20

    ram = []
    sham = []
    rahim = []

    sorted_apples = sorted(apples, reverse=True)

    ram_total = 0
    sham_total = 0
    rahim_total = 0

    for weight in sorted_apples:
        if ram_total + weight <= ram_share:
            ram.append(weight)
            ram_total += weight
        elif sham_total + weight <= sham_share:
            sham.append(weight)
            sham_total += weight
        elif rahim_total + weight <= rahim_share:
            rahim.append(weight)

    return ram, sham, rahim

def print_distribution(person, name):
    print(f"{name} : ", end="")
    print(" ".join(map(str, person)))

def main():
    apples = []

    print("Enter apple weights in grams (enter -1 to stop):")
    while True:
        try:
            weight = int(input())
            if weight == -1:
                break
            apples.append(weight)
        except ValueError:
            print("enter a valid number.")

    ram, sham, rahim = distribute_apples(apples)

    print("Distribution Result :")
    print_distribution(ram, "Ram")
    print_distribution(sham, "Sham")
    print_distribution(rahim, "Rahim")

if __name__ == "__main__":
    main()



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Q3


from collections import defaultdict

def find_paths(soldiers, castle):

    def is_adjacent(p1, p2):
        """Checks if two points are adjacent."""
        return abs(p1[0] - p2[0]) <= 1 and abs(p1[1] - p2[1]) <= 1 and p1 != p2

    def can_jump(p1, p2, soldiers):
        """Checks if a jump from p1 to p2 is possible."""
        return p2 in soldiers and p1 != p2

    def find_paths_helper(current, visited, path):
        """Recursive helper function to find paths."""
        if current == castle:
            paths.append(path[:])
            return

        for soldier in soldiers:
            if soldier not in visited:
                if is_adjacent(current, soldier):
                    new_path = path + [f"Kill {soldier}. Turn Left"]
                    find_paths_helper(soldier, visited | {soldier}, new_path)
                elif can_jump(current, soldier, soldiers):
                    new_path = path + [f"Jump {soldier}"]
                    find_paths_helper(soldier, visited | {soldier}, new_path)

    paths = []
    find_paths_helper(castle, {castle}, [f"Start {castle}"])
    return paths

def main():
    num_soldiers = int(input("enter the number of soldiers: "))
    soldiers = []
    for i in range(num_soldiers):
        x, y = map(int, input(f"Enter the coordinates of the soldier {i+1}: ").split())
        soldiers.append((x, y))

    castle_x, castle_y = map(int, input("Enter the coordinates of your special castle: ").split())
    castle = (castle_x, castle_y)

    paths = find_paths(soldiers, castle)
    print(f"Thanks. Your 'special_castle' has {len(paths)} unique paths")
    for i, path in enumerate(paths):
        print(f"\nPath {i+1}:\n========")
        for move in path:
            print(move)

if __name__ == "__main__":
    main()
